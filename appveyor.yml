
image:
- Visual Studio 2017
- Ubuntu1804
- macos

configuration: Release

platform:
- x64

cache:
- externals/googletest -> appveyor.yml
- externals/OpenSceneGraph -> appveyor.yml
- externals/OSI -> appveyor.yml
- externals/SUMO -> appveyor.yml
- resources/models -> appveyor.yml

skip_commits:
  message: /#skip_build/

before_build:
  - cmd: gitversion /l console /output buildserver

  - ps: |
        git submodule update --init --quiet
        echo "const char* ESMINI_BUILD_VERSION=`"$env:APPVEYOR_BUILD_VERSION`";"  | Out-File -Encoding ascii EnvironmentSimulator/Modules/CommonMini/buildnr.cpp
        type EnvironmentSimulator/Modules/CommonMini/buildnr.cpp

# publish package on tag build
deploy:
  - provider: GitHub
    tag: $(APPVEYOR_REPO_TAG_NAME)
    release: esmini $(GitVersion_MajorMinorPatch) (build $(APPVEYOR_BUILD_NUMBER))
    description: 'Demo and binaries. For information about changes and new features see [release notes](https://github.com/esmini/esmini/blob/master/release_notes.md).'
    auth_token:
      secure: 'Zsjm85fzs4eTdDJg1VB+Y8Lk+5bEJRBkeaEtYtnbtv2IUg1sanoQTub/55QYNBsY'
    on:
       APPVEYOR_REPO_TAG: true       # deploy on tag push only

for:
  -
    matrix:
      only:
        - image: Ubuntu1804
    init:
      - echo Ubuntu build script
      - sh: >-
          sudo apt-get update

          sudo apt-get install -y libgl1-mesa-dev libxrandr-dev libxinerama-dev

    build_script:
      - sh: >-
          # Normal (Release config with OSG)

          mkdir build

          cd build

          cmake -DCMAKE_BUILD_TYPE=Release ..

          cmake --build . -j --config Release --target install

          cd ..

          # No OSG, OSI and SUMO

          mkdir build-no-osg

          cd build-no-osg

          cmake -DCMAKE_BUILD_TYPE=Release -D USE_OSG=False -D USE_SUMO=False -D USE_OSI=False ..

          cmake --build . -j --config Release

          cd ..

          # Debug

          mkdir build-debug

          cd build-debug

          cmake -DCMAKE_BUILD_TYPE=Debug ..

          cmake --build . -j --config Debug

          cd ..

    after_build:
      - if [[ $APPVEYOR_REPO_COMMIT_MESSAGE = *#store_bins* ]] || [ "$APPVEYOR_REPO_TAG" == "true" ]; then
          cd ../ &&
          zip -r esmini/esmini-bin_ubuntu.zip esmini/bin esmini/EnvironmentSimulator/Applications/odrplot/xodr.py  esmini/EnvironmentSimulator/Libraries/esminiRMLib/esminiRMLib.hpp esmini/EnvironmentSimulator/Libraries/esminiRMLib/esminiRMWrapper.cs esmini/EnvironmentSimulator/Libraries/esminiRMLib/esminiRMUnityUtil.cs esmini/EnvironmentSimulator/Libraries/esminiLib/esminiLib.hpp esmini/EnvironmentSimulator/Libraries/esminiLib/ESMiniWrapper.cs esmini/version.txt &&
          cd -;
        else
          echo "Skip binary artifacts";
        fi
      - chmod -R +x ./run/*
      - chmod -R +x ./scripts/*
      - ./scripts/generate_binary_dist.sh
      - if [ "$APPVEYOR_REPO_TAG" == "true" ]; then
          mv esmini-demo.zip esmini-demo_ubuntu.zip;
        else
          rm esmini-demo.zip;
        fi

    test_script:
      - sh: >-

          Xvfb :99 -screen 0 1920x1080x24+32 & export DISPLAY=:99

          ./scripts/run_tests.sh

    artifacts:
      - path: esmini-*_ubuntu.zip
        name: ubuntu_artifacts

  -
    matrix:
      only:
        - image: macos

    build_script:
      - echo MacOS Catalina build script
      - sh: >-
          # Normal build for release

          mkdir build

          cd build

          cmake -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64" ..

          cmake --build . -j --config Release --target install

          cd ..

      - sh: >-
          # Also verify build Without OSG, OSI and SUMO

          mkdir build-no-osg

          cd build-no-osg

          cmake -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64" -DUSE_OSG=False -DUSE_SUMO=False -DUSE_OSI=False ..

          cmake --build . -j --config Release

          cd ..

    after_build:
      - sh: >-

          lipo -create bin/libesminiRMLib.dylib -output bin/esminiRMLib.bundle

          lipo -create bin/libesminiLib.dylib -output bin/esminiLib.bundle

          if [[ $APPVEYOR_REPO_COMMIT_MESSAGE = *#store_bins* ]] || [ "$APPVEYOR_REPO_TAG" == "true" ];
          then
            cd ../;zip -r esmini/esmini-bin_mac_catalina.zip esmini/bin esmini/EnvironmentSimulator/Applications/odrplot/xodr.py esmini/EnvironmentSimulator/Libraries/esminiRMLib/esminiRMLib.hpp esmini/EnvironmentSimulator/Libraries/esminiRMLib/esminiRMWrapper.cs esmini/EnvironmentSimulator/Libraries/esminiRMLib/esminiRMUnityUtil.cs esmini/EnvironmentSimulator/Libraries/esminiLib/esminiLib.hpp esmini/EnvironmentSimulator/Libraries/esminiLib/ESMiniWrapper.cs esmini/version.txt;cd -
          else
            echo "Skip binary artifacts";
          fi

          chmod -R +x ./run/*

          chmod -R +x ./scripts/*

          ./scripts/generate_binary_dist.sh

          if [ "$APPVEYOR_REPO_TAG" == "true" ];
          then
              mv esmini-demo.zip esmini-demo_mac_catalina.zip;
          else
              rm esmini-demo.zip;
          fi

    test_script:
      - sh: ./scripts/run_tests.sh

    artifacts:
      - path: esmini-*_mac_catalina.zip
        name: mac_catalina_artifacts

    # on_finish:
      # - sh: export APPVEYOR_VNC_BLOCK=true
      # - sh: curl -sflL 'https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-vnc.sh' | bash -e -

  -
    matrix:
      only:
        - image: Visual Studio 2017
          platform: x64
    build_script:
      - echo Visual Studio 2017 x64 build script
      - cmd:
          mkdir build

          cd build

          cmake -G "Visual Studio 15 Win64" ..

          msbuild /m /property:Configuration=Release EnvironmentSimulator.sln

          cd..

          scripts\generate_binary_dist.bat

          echo Also verify build without OSG, OSI and SUMO

          mkdir build-no-osg

          cd build-no-osg

          cmake -G "Visual Studio 15 Win64" -D USE_OSG=False -D USE_SUMO=False -D USE_OSI=False ..

          cmake --build . -j --config Release

          cd..

    after_build:
      - ps: |
          if ($Env:APPVEYOR_REPO_COMMIT_MESSAGE -match '#store_bins' -Or $Env:APPVEYOR_REPO_TAG -eq $true)
          {
            cd ..;7z a esmini/esmini-bin_win_x64.zip esmini/bin/* esmini/EnvironmentSimulator/Applications/odrplot/xodr.py esmini/EnvironmentSimulator/Libraries/esminiRMLib/esminiRMLib.hpp esmini/EnvironmentSimulator/Libraries/esminiRMLib/esminiRMWrapper.cs esmini/EnvironmentSimulator/Libraries/esminiRMLib/esminiRMUnityUtil.cs esmini/EnvironmentSimulator/Libraries/esminiLib/esminiLib.hpp esmini/EnvironmentSimulator/Libraries/esminiLib/ESMiniWrapper.cs esmini/version.txt;cd esmini
          }
          else
          {
            echo "Skip binary artifacts"
          }

          if ($Env:APPVEYOR_REPO_TAG -eq $true)
          {
            7z a esmini-demo_win.zip esmini-demo/*
          }
          else
          {
            echo "Skip demos"
          }

      - cmd:
          cd ..

          curl -kL "https://downloads.fdossena.com/geth.php?r=mesa64-latest" -o mesa_win64.7z

          7z x mesa_win64.7z -omesa

          cp mesa/opengl32.dll esmini/bin

          cp mesa/opengl32.dll esmini/build/EnvironmentSimulator/Unittest/Release

          cd esmini

    # on_finish:
    #   - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))

    test_script:
      - cmd: >-

          set PATH="c:/Program Files/Git/bin";%PATH%

          .\scripts\run_tests.sh

    artifacts:
      - path: esmini-*_win*.zip
        name: windows_artifacts

  -
    matrix:
      exclude:
        - image: Ubuntu1804
          platform: x86
        - image: macos-mojave
          platform: x86
        - image: macos
          platform: x86
        - image: Visual Studio 2015
          platform: x86

