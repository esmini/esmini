name: Continuous Integration

permissions:
  contents: write

on:
  push:
    branches:
      - master
      - dev
      - 'feature/**'
    tags:
      - v[0-9]+.[0-9]+.[0-9]+

  pull_request:
    branches:
      - master
      - dev

  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4.1.7

      - name: Install Python3.8 and dependencies
        uses: actions/setup-python@v5.1.1
        with:
          python-version: '3.8'
          cache: 'pip'
      - run: pip install -r support/python/requirements.txt

      - name: Make clang-format executable
        run: chmod +x support/script/clang-format-runner.sh

      - name: Run clang-format lint
        run: pre-commit run clang-format --all-files

      - name: Run cmake-format lint
        run: pre-commit run cmake-format --all-files

      - name: Cache Cppcheck 2.17.1
        uses: actions/cache@v4
        id: cache-cppcheck
        with:
          path: ~/.local/cppcheck-2.17.1
          key: cppcheck-2.17.1-${{ runner.os }}

      - name: Install build dependencies for Cppcheck
        if: steps.cache-cppcheck.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake libpcre3-dev

      - name: Build and install Cppcheck 2.17.1
        if: steps.cache-cppcheck.outputs.cache-hit != 'true'
        run: |
          cd /tmp
          wget https://github.com/danmar/cppcheck/archive/refs/tags/2.17.1.tar.gz
          tar -xzf 2.17.1.tar.gz
          cd cppcheck-2.17.1
          mkdir build
          cd build
          cmake .. -DCMAKE_INSTALL_PREFIX=$HOME/.local/cppcheck-2.17.1 -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          make install

      - name: Add Cppcheck to PATH
        run: echo "$HOME/.local/cppcheck-2.17.1/bin" >> $GITHUB_PATH

      - name: Verify Cppcheck version
        run: |
          cppcheck --version
          which cppcheck

      - name: Run cppcheck lint
        run: pre-commit run cppcheck --all-files

      - name: Run black-format lint
        run: pre-commit run black-format --all-files

      # TODO: OpenDrive generation currently has too many pylint issues
      #- name: Run pylint lint
      #  run: python3 support/python/src/main.py run pylint

  test:
    needs: [lint]

    strategy:
      matrix:
        os: [ubuntu-22.04, macos-13, windows-2022]
        configuration: [Debug, Release]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4.1.7
        with:
          submodules: true
          fetch-tags: true
          fetch-depth: 0

      - uses: ./.github/actions/setup_tools_shared

      # Generate build number based on offset from former AppVeyor CI machine
      - uses: ./.github/actions/generate_offset_run_number

      - name: Cache
        uses: actions/cache@v4
        with:
          path: |
            externals/googletest
            externals/osg
            externals/osi
            externals/sumo
            externals/implot
            resources/models
          key: ${{ runner.os }}-external-resources

      - name: CMake Configure - Default
        if: runner.os != 'macOS'
        shell: pwsh
        run: cmake "--preset=ci-$("${{ matrix.os }}".split("-")[0])-test" -DCMAKE_BUILD_TYPE:STRING=${{ matrix.configuration }} -DESMINI_BUILD_VERSION=${{ env.BUILD_NUMBER }}

      - name: CMake Configure - macOS
        if: runner.os == 'macOS'
        shell: pwsh
        run: cmake "--preset=ci-$("${{ matrix.os }}".split("-")[0])-test" -DCMAKE_BUILD_TYPE:STRING=${{ matrix.configuration }} -DESMINI_BUILD_VERSION=${{ env.BUILD_NUMBER }} -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64"

      - name: CMake Build
        run: cmake --build build --config ${{ matrix.configuration }} --target install -j 2

      - name: Compile minimal C example
        if: runner.os == 'Linux'
        run: |
          echo -e '#include "esminiLib.hpp"\n\nint main()\n{\n    return 0;\n}' > pure-c.c
          gcc pure-c.c -I EnvironmentSimulator/Libraries/esminiLib/ ./bin/libesminiLib.so -o pure-c
          ./pure-c

      - name: CMake Build OSMP FMU
        if: runner.os == 'Linux'
        run: |
          cd OSMP_FMU
          mkdir build
          cd build
          cmake ..
          cmake --build . -j2

      - name: Validate OSMP FMU
        if: runner.os == 'Linux'
        run: |
          cd OSMP_FMU/build
          python3 -m venv .venv
          source .venv/bin/activate
          pip3 install fmpy
          fmpy validate esmini.fmu

      - name: Run OSMP FMU
        if: runner.os == 'Linux'
        run: |
          cd OSMP_FMU/build
          python3 -m venv .venv
          source .venv/bin/activate
          pip3 install fmpy
          fmpy simulate esmini.fmu --start-values xosc_path ../../resources/xosc/cut-in.xosc

      - name: Run Tests - Unix
        if: runner.os != 'Windows'
        # Use xvfb on Linux only
        run: ${{ matrix.os == 'ubuntu-22.04' && 'xvfb-run' || '' }} ./scripts/run_tests.sh -b ${{ matrix.configuration }} -p

      - name: Run Tests - Windows
        if: runner.os == 'Windows'
        env:
          GALLIUM_DRIVER: softpipe
          MESA_GL_VERSION_OVERRIDE: 4.5
        shell: bash
        run: ./scripts/run_tests.sh -b ${{ matrix.configuration }} -p

      - uses: ./.github/actions/upload_esmini_artifacts
        if: matrix.configuration == 'Release'

      # - name: Debugging with tmate
      #   if: ${{ failure() }}
      #   uses: mxschmitt/action-tmate@v3

  test-no-external-modules:
    needs: [lint]

    strategy:
      matrix:
        os: [ubuntu-22.04, macos-13, windows-2022]
        configuration: [Debug, Release]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4.1.7
        with:
          submodules: true

      - uses: ./.github/actions/setup_tools_shared

      - name: Cache
        uses: actions/cache@v4
        with:
          path: |
            externals/googletest
            externals/osg
            externals/osi
            externals/sumo
            externals/implot
            resources/models
          key: ${{ runner.os }}-external-resources

      - name: CMake Configure - Default
        if: runner.os != 'macOS'
        shell: pwsh
        run: cmake "--preset=ci-$("${{ matrix.os }}".split("-")[0])-test-no-external-modules" -DCMAKE_BUILD_TYPE:STRING=${{ matrix.configuration }}

      - name: CMake Configure - macOS
        if: runner.os == 'macOS'
        shell: pwsh
        run: cmake "--preset=ci-$("${{ matrix.os }}".split("-")[0])-test-no-external-modules" -DCMAKE_BUILD_TYPE:STRING=${{ matrix.configuration }} -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64"

      - name: CMake Build
        run: cmake --build build --config ${{ matrix.configuration }} --target install -j 2

      # run xml validation only here.
      # 1. Only needs to run once
      # 2. It's not dependent on configuration, so it can be run by any config
      # 3. This configuration is faster so validation won't add to total CI run time
      - name: Run schema validation
        if: runner.os == 'Linux' && matrix.configuration == 'Release'
        run: python3 scripts/run_schema_comply.py resources EnvironmentSimulator

      - name: Run Tests - Unix
        if: runner.os != 'Windows'
        # Use xvfb on Linux only
        run: ${{ matrix.os == 'ubuntu-22.04' && 'xvfb-run' || '' }} ./scripts/run_tests.sh -b ${{ matrix.configuration }} -p

      - name: Run Tests - Windows
        if: runner.os == 'Windows'
        env:
          GALLIUM_DRIVER: softpipe
          MESA_GL_VERSION_OVERRIDE: 4.5
        shell: bash
        run: ./scripts/run_tests.sh -b ${{ matrix.configuration }} -p

  release:
    needs: [test, test-no-external-modules]
    if: startsWith(github.ref, 'refs/tags/')

    strategy:
      matrix:
        os: [ubuntu-22.04, macos-13, windows-2022]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4.1.7
        with:
          submodules: true
          fetch-depth: 0

      # Generate build number based on offset from former AppVeyor CI machine
      - uses: ./.github/actions/generate_offset_run_number

      - uses: actions/download-artifact@v4.1.7
        with:
          name: esmini-bin_${{ runner.os }}

      - uses: actions/download-artifact@v4.1.7
        with:
          name: esmini-demo_${{ runner.os }}

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.7
        with:
          versionSpec: '5.x'

      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.7

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          name: 'esmini ${{ steps.gitversion.outputs.majorMinorPatch }} (build ${{ env.BUILD_NUMBER }})'
          body: 'Demo and binaries. For information about changes and new features see [release notes](https://github.com/esmini/esmini/blob/master/release_notes.md).'
          files: |
            esmini-bin_${{ runner.os }}.zip
            esmini-demo_${{ runner.os }}.zip
