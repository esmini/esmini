name: Continuous Integration

permissions:
  contents: write

on:
  push:
    branches:
      - master
      - dev
      - 'feature/**'
    tags:
      - v[0-9]+.[0-9]+.[0-9]+

  pull_request:
    branches:
      - master
      - dev

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3.3.0

      - name: Install clang-format-15
        if: runner.os == 'Linux'
        env:
          LLVM_URL: http://apt.llvm.org/jammy/
          LLVM_PKG: llvm-toolchain-jammy-15
        run: wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add - 2>/dev/null
          && sudo add-apt-repository -y "deb ${{ env.LLVM_URL }} ${{ env.LLVM_PKG }} main"
          && sudo apt-get update -q
          && sudo apt-get install -y -q clang-format-15
          && sudo update-alternatives --install /usr/bin/clang-format clang-format /usr/bin/clang-format-15 200

      - name: Install Python3.8 and dependencies
        uses: actions/setup-python@v4.5.0
        with:
          python-version: '3.8'
          cache: 'pip'
      - run: pip install -r support/python/requirements.txt

      - name: Run clang-format lint
        run: python3 support/python/src/main.py run format --clang_format_checker

      - name: Run cmake-format lint
        run: python3 support/python/src/main.py run format --cmake_format_checker

      - name: Run black-format lint
        run: python3 support/python/src/main.py run format --black_format_checker

      # TODO: OpenDrive generation currently has too many pylint issues
      #- name: Run pylint lint
      #  run: python3 support/python/src/main.py run pylint

  test:
    needs: [lint]

    strategy:
      matrix:
        os: [ubuntu-20.04, macos-10.15, windows-2019]
        configuration: [Debug, Release]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3.3.0
        with:
          submodules: true

      - uses: ./.github/actions/setup_tools_shared

      # Generate build number based on offset from former AppVeyor CI machine
      - uses: ./.github/actions/generate_offset_run_number

      - name: Cache
        uses: actions/cache@v3.2.5
        with:
          path: |
            externals/googletest
            externals/osg
            externals/osi
            externals/sumo
            resources/models
          key: ${{ runner.os }}-external-resources

      # TODO: We need a way to not fetch existing dependencies because of cached ones. This command currently asks for user input
      #- name: Fetch external dependencies/resources
      #  run: python3 support/python/src/main.py fetch dependency

      #- name: Generate OpenDrive interface
      #  run: python3 support/python/src/main.py generate opendrive

      - name: Install clang-tidy-15 - Ubuntu
        if: runner.os == 'Linux'
        env:
          LLVM_URL: http://apt.llvm.org/focal/
          LLVM_PKG: llvm-toolchain-focal-15
        run: wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add - 2>/dev/null
          && sudo add-apt-repository -y "deb ${{ env.LLVM_URL }} ${{ env.LLVM_PKG }} main"
          && sudo apt-get update -q
          && sudo apt-get install -y -q clang-tidy-15
          && sudo update-alternatives --install /usr/bin/clang-tidy clang-tidy /usr/bin/clang-tidy-15 200

      - name: Build cppcheck 2.10 - Ubuntu
        if: runner.os == 'Linux'
        env:
          CPPCHECK_BUILD: /home/cppcheck/build
          CPPCHECK_SRC: /home/cppcheck/cppcheck-src
        run: sudo apt-get purge --auto-remove cppcheck
          && sudo apt-get install -y -q libxml2-utils libz3-dev libtinyxml2-dev libpcre3-dev
          && sudo mkdir -p ${{ env.CPPCHECK_BUILD }}
          && git clone --branch 2.10 https://github.com/danmar/cppcheck.git ${{ env.CPPCHECK_SRC }}
          && cmake -S ${{ env.CPPCHECK_SRC }} -B ${{ env.CPPCHECK_BUILD }} -G "Ninja" -DCMAKE_BUILD_TYPE:STRING=Release -DHAVE_RULES=On -DBUILD_GUI=Off
          && cmake --build ${{ env.CPPCHECK_BUILD }} -j
          && sudo cmake --install ${{ env.CPPCHECK_BUILD }}

      - name: CMake Configure - Default
        if: runner.os != 'macOS'
        shell: pwsh
        run: cmake "--preset=ci-$("${{ matrix.os }}".split("-")[0])-test" -DCMAKE_BUILD_TYPE:STRING=${{ matrix.configuration }} -DESMINI_BUILD_VERSION=${{ env.BUILD_NUMBER }}

      - name: CMake Configure - macOS
        if: runner.os == 'macOS'
        shell: pwsh
        run: cmake "--preset=ci-$("${{ matrix.os }}".split("-")[0])-test" -DCMAKE_BUILD_TYPE:STRING=${{ matrix.configuration }} -DESMINI_BUILD_VERSION=${{ env.BUILD_NUMBER }} -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64"

      - name: CMake Build
        run: cmake --build build --config ${{ matrix.configuration }} --target install -j 2

      - name: Run Tests - Unix
        if: runner.os != 'Windows'
        uses: GabrielBB/xvfb-action@v1.6
        with:
          run: ./scripts/run_tests.sh

      - name: Run Tests - Windows
        if: runner.os == 'Windows'
        env:
          GALLIUM_DRIVER: softpipe
          MESA_GL_VERSION_OVERRIDE: 4.5
        shell: bash
        run: ./scripts/run_tests.sh ${{ matrix.configuration }}

      - uses: ./.github/actions/upload_esmini_artifacts
        if: matrix.configuration == 'Release'

      # - name: Debugging with tmate
        # if: ${{ failure() }}
        # uses: mxschmitt/action-tmate@v3.14

  test-no-external-modules:
    needs: [lint]

    strategy:
      matrix:
        os: [ubuntu-20.04, macos-10.15, windows-2019]
        configuration: [Debug, Release]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3.3.0
        with:
          submodules: true

      - uses: ./.github/actions/setup_tools_shared

      - name: Cache
        uses: actions/cache@v3.2.5
        with:
          path: |
            externals/googletest
            externals/osg
            externals/osi
            externals/sumo
            resources/models
          key: ${{ runner.os }}-external-resources

      # TODO: We need a way to not fetch existing dependencies because of cached ones. This command currently asks for user input
      #- name: Fetch external dependencies/resources
      #  run: python3 support/python/src/main.py fetch dependency

      #- name: Generate OpenDrive interface
      #  run: python3 support/python/src/main.py generate opendrive

      - name: Install clang-tidy-15 - Ubuntu
        if: runner.os == 'Linux'
        env:
          LLVM_URL: http://apt.llvm.org/focal/
          LLVM_PKG: llvm-toolchain-focal-15
        run: wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add - 2>/dev/null
          && sudo add-apt-repository -y "deb ${{ env.LLVM_URL }} ${{ env.LLVM_PKG }} main"
          && sudo apt-get update -q
          && sudo apt-get install -y -q clang-tidy-15
          && sudo update-alternatives --install /usr/bin/clang-tidy clang-tidy /usr/bin/clang-tidy-15 200

      - name: Build cppcheck 2.10 - Ubuntu
        if: runner.os == 'Linux'
        env:
          CPPCHECK_BUILD: /home/cppcheck/build
          CPPCHECK_SRC: /home/cppcheck/cppcheck-src
        run: sudo apt-get purge --auto-remove cppcheck
          && sudo apt-get install -y -q libxml2-utils libz3-dev libtinyxml2-dev libpcre3-dev
          && sudo mkdir -p ${{ env.CPPCHECK_BUILD }}
          && git clone --branch 2.10 https://github.com/danmar/cppcheck.git ${{ env.CPPCHECK_SRC }}
          && cmake -S ${{ env.CPPCHECK_SRC }} -B ${{ env.CPPCHECK_BUILD }} -G "Ninja" -DCMAKE_BUILD_TYPE:STRING=Release -DHAVE_RULES=On -DBUILD_GUI=Off
          && cmake --build ${{ env.CPPCHECK_BUILD }} -j
          && sudo cmake --install ${{ env.CPPCHECK_BUILD }}

      - name: CMake Configure - Default
        if: runner.os != 'macOS'
        shell: pwsh
        run: cmake "--preset=ci-$("${{ matrix.os }}".split("-")[0])-test-no-external-modules" -DCMAKE_BUILD_TYPE:STRING=${{ matrix.configuration }}

      - name: CMake Configure - macOS
        if: runner.os == 'macOS'
        shell: pwsh
        run: cmake "--preset=ci-$("${{ matrix.os }}".split("-")[0])-test-no-external-modules" -DCMAKE_BUILD_TYPE:STRING=${{ matrix.configuration }} -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64"

      - name: CMake Build
        run: cmake --build build --config ${{ matrix.configuration }} --target install -j 2

      - name: Run Tests - Unix
        if: runner.os != 'Windows'
        uses: GabrielBB/xvfb-action@v1.6
        with:
          run: ./scripts/run_tests.sh ${{ matrix.configuration }} true

      - name: Run Tests - Windows
        if: runner.os == 'Windows'
        env:
          GALLIUM_DRIVER: softpipe
          MESA_GL_VERSION_OVERRIDE: 4.5
        shell: bash
        run: ./scripts/run_tests.sh ${{ matrix.configuration }} true

  release:
    needs: [test, test-no-external-modules]
    if: startsWith(github.ref, 'refs/tags/')

    strategy:
      matrix:
        os: [ubuntu-20.04, macos-10.15, windows-2019]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3.3.0
        with:
          submodules: true
          fetch-depth: 0

      # Generate build number based on offset from former AppVeyor CI machine
      - uses: ./.github/actions/generate_offset_run_number

      - uses: actions/download-artifact@v3
        with:
          name: esmini-bin_${{ runner.os }}

      - uses: actions/download-artifact@v3
        with:
          name: esmini-demo_${{ runner.os }}

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.7
        with:
          versionSpec: '5.x'

      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.7

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          name: 'esmini ${{ steps.gitversion.outputs.majorMinorPatch }} (build ${{ env.BUILD_NUMBER }})'
          body: 'Demo and binaries. For information about changes and new features see [release notes](https://github.com/esmini/esmini/blob/master/release_notes.md).'
          files: |
            esmini-bin_${{ runner.os }}.zip
            esmini-demo_${{ runner.os }}.zip
